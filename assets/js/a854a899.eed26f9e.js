"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[3374],{22496:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var n=i(74848),s=i(28453);const r={sidebar_position:1},o="System Overview",a={id:"requirements/system-overview",title:"System Overview",description:"Project Abstract",source:"@site/docs/requirements/system-overview.md",sourceDirName:"requirements",slug:"/requirements/system-overview",permalink:"/project-copilot-clone-2/docs/requirements/system-overview",draft:!1,unlisted:!1,editUrl:"https://github.com/Capstone-Projects-2025-Spring/project-copilot-clone-2/edit/main/documentation/docs/requirements/system-overview.md",tags:[],version:"current",lastUpdatedBy:"Nick Rucinski",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Requirements Specification",permalink:"/project-copilot-clone-2/docs/category/requirements-specification"},next:{title:"System Block Diagram",permalink:"/project-copilot-clone-2/docs/requirements/system-block-diagram"}},c={},d=[{value:"Project Abstract",id:"project-abstract",level:2},{value:"Conceptual Design",id:"conceptual-design",level:2},{value:"Background",id:"background",level:2}];function l(e){const t={a:"a",h1:"h1",h2:"h2",p:"p",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"system-overview",children:"System Overview"}),"\n",(0,n.jsx)(t.h2,{id:"project-abstract",children:"Project Abstract"}),"\n",(0,n.jsx)(t.p,{children:"The goal of this project is to develop an AI-powered coding assistant similar to GitHub Copilot, but with a strong emphasis on education. Unlike traditional educational tools that rely on structured coding modules, our assistant uses detailed logging and mistake recognition to analyze how students code, fostering a deeper understanding of their work while preventing over-reliance on AI-generated suggestions. By tracking user interactions and offering real-time feedback, the system serves as both a coding assistant and a learning aid for novice programmers. Additionally, users can access this data through a portal to review coding habits and track progress over time. Our aim is to integrate seamlessly into the IDE, ensuring minimal disruption to the coding workflow while maintaining fast response times."}),"\n",(0,n.jsx)(t.h2,{id:"conceptual-design",children:"Conceptual Design"}),"\n",(0,n.jsx)(t.p,{children:"This project will integrate an AI model and API, such as GitHub Copilot or OpenAI\u2019s ChatGPT, to deliver intelligent inline code suggestions within a Visual Studio Code extension. The extension will not only assist users in real-time but also track various statistics on how these suggestions are utilized. This data will be sent to a backend server, where it will be analyzed to identify patterns in user behavior. When necessary, the assistant will intervene with contextual feedback, helping users recognize mistakes, improve coding habits, and develop a deeper understanding of their work. Additionally, a dashboard will present these insights in an intuitive interface, allowing users to monitor their progress, review past interactions, and refine their skills over time. By combining real-time assistance with structured analytics, this system aims to create a more interactive and educational coding experience."}),"\n",(0,n.jsx)(t.h2,{id:"background",children:"Background"}),"\n",(0,n.jsx)(t.p,{children:"AI-powered code assistants, such as OpenAI's ChatGPT and GitHub Copilot, have significantly transformed software development by helping programmers write code more efficiently and with fewer errors. However, these tools have also posed challenges for novice programmers. Many beginners rely on the suggestions provided by the AI without fully grasping the underlying concepts, sometimes even accepting solutions without reading or understanding them. This over-reliance can encourage poor programming habits and hinder skill development. Our project seeks to address this issue by implementing a system that still provides intelligent code suggestions but requires users to demonstrate a clear understanding of the suggested code before it is integrated into their projects. This approach aims to strike a balance between convenience and education, ensuring that users not only receive assistance but also gain a deeper comprehension of their code."}),"\n",(0,n.jsxs)(t.p,{children:["While there are code analyzers that aim to provide feeback, such as ",(0,n.jsx)(t.a,{href:"https://sourcery.ai/",children:"Sourcery"})," or ",(0,n.jsx)(t.a,{href:"https://www.pylint.org/",children:"PyLint"}),', they are typically not real-time and operate outside of an IDE. These tools tend to focus on writing "clean" and effecient code, but fail to explain why such practices are imporant or how users can improve their understanding. Our approach integrates directly with VSCode and provides realtime feedback in order to disrupt the programmer as little as possible. With this approach we hope that AI coding assistance can still be used by newer programmers while still promoting learning and good programming habits.']})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>o,x:()=>a});var n=i(96540);const s={},r=n.createContext(s);function o(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);