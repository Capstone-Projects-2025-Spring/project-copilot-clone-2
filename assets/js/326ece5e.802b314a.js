"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[3661],{16404:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var n=s(74848),r=s(28453);const i={},o=void 0,a={id:"api-specification/Frontend_Documentation",title:"Frontend_Documentation",description:"Person",source:"@site/docs/api-specification/Frontend_Documentation.md",sourceDirName:"api-specification",slug:"/api-specification/Frontend_Documentation",permalink:"/project-copilot-clone-2/docs/api-specification/Frontend_Documentation",draft:!1,unlisted:!1,editUrl:"https://github.com/Capstone-Projects-2025-Spring/project-copilot-clone-2/edit/main/documentation/docs/api-specification/Frontend_Documentation.md",tags:[],version:"current",lastUpdatedBy:"jaimenguyen168",frontMatter:{},sidebar:"docsSidebar",previous:{title:"CalculatorModel.java",permalink:"/project-copilot-clone-2/docs/api-specification/calculator-model-generated"},next:{title:"Test Procedures",permalink:"/project-copilot-clone-2/docs/category/test-procedures"}},d={},c=[];function l(e){const t={br:"br",p:"p",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"Person"}),"\n",(0,n.jsxs)(t.p,{children:["The purpose of the person class is to identify and create new users within the copilot education tool.  Allows for the identification of a person's role in the system.",(0,n.jsx)(t.br,{}),"\n","Data fields"]}),"\n",(0,n.jsx)(t.p,{children:"personId"}),"\n",(0,n.jsx)(t.p,{children:"The identification attribute that will be used to track each user.\nemail"}),"\n",(0,n.jsx)(t.p,{children:"The user's personal email address.\nusername"}),"\n",(0,n.jsx)(t.p,{children:"The name the user will use when accessing their account.\ndateCreated"}),"\n",(0,n.jsx)(t.p,{children:"Date variable to classify when the account was created."}),"\n",(0,n.jsx)(t.p,{children:"Methods"}),"\n",(0,n.jsx)(t.p,{children:"authenticate()"}),"\n",(0,n.jsxs)(t.p,{children:["Uses the Person data fields to confirm the user.",(0,n.jsx)(t.br,{}),"\n","User data is stored in the backend database after authentification."]}),"\n",(0,n.jsx)(t.p,{children:"User"}),"\n",(0,n.jsx)(t.p,{children:"Class that will contain data for an individual using the copilot tool for learning.  The User will have access to different interactive educational tools."}),"\n",(0,n.jsx)(t.p,{children:"Data fields"}),"\n",(0,n.jsx)(t.p,{children:"No data fields."}),"\n",(0,n.jsx)(t.p,{children:"Methods"}),"\n",(0,n.jsx)(t.p,{children:"acceptSuggestions()"}),"\n",(0,n.jsxs)(t.p,{children:["Method that is used when the user is presented with an AI generated code suggestion.",(0,n.jsx)(t.br,{}),"\n","Will be used to process an 'accept' of the suggested code.",(0,n.jsx)(t.br,{}),"\n","Response will return an accept object and store it in the database.",(0,n.jsx)(t.br,{}),"\n","rejectSuggestion()"]}),"\n",(0,n.jsxs)(t.p,{children:["Used when the user is presented with a code suggestion.",(0,n.jsx)(t.br,{}),"\n","Will be used to process a 'reject' to the current code suggestion.\nSimilarly to accept, the reject will return a rejection object to store in the database.",(0,n.jsx)(t.br,{}),"\n","modifySuggestion()"]}),"\n",(0,n.jsxs)(t.p,{children:["Functions to allow the user to make changes to AI generated code suggestions string rather than accepting or rejecting.",(0,n.jsx)(t.br,{}),"\n","Returns a modfied code suggestion object.",(0,n.jsx)(t.br,{}),"\n","viewDashboard()"]}),"\n",(0,n.jsx)(t.p,{children:"Method that will display the user's information and progress dashboard."}),"\n",(0,n.jsx)(t.p,{children:"Progress"}),"\n",(0,n.jsx)(t.p,{children:"Component used to track the user's usage and proficiency as they encounter AI code suggestions."}),"\n",(0,n.jsx)(t.p,{children:"Data fields"}),"\n",(0,n.jsx)(t.p,{children:"No Data fields"}),"\n",(0,n.jsx)(t.p,{children:"Methods"}),"\n",(0,n.jsx)(t.p,{children:"progressId"}),"\n",(0,n.jsxs)(t.p,{children:["An identification field to identify unique types of user progress data.",(0,n.jsx)(t.br,{}),"\n","status"]}),"\n",(0,n.jsxs)(t.p,{children:["A tracking field to determine where the user stands with different topics.",(0,n.jsx)(t.br,{}),"\n","How far along with an assignment or task the user is.",(0,n.jsx)(t.br,{}),"\n","level"]}),"\n",(0,n.jsxs)(t.p,{children:["Represents the state of the user's progress.",(0,n.jsx)(t.br,{}),"\n","lastUpdated"]}),"\n",(0,n.jsx)(t.p,{children:"A date field that will show the last time a user's progress was refreshed.  Will be initiated by the admin."}),"\n",(0,n.jsx)(t.p,{children:"Admin"}),"\n",(0,n.jsx)(t.p,{children:"Component that classifies the administrator in the system to monitor users and their progress."}),"\n",(0,n.jsx)(t.p,{children:"Data fields"}),"\n",(0,n.jsx)(t.p,{children:"No data fields"}),"\n",(0,n.jsx)(t.p,{children:"Methods"}),"\n",(0,n.jsx)(t.p,{children:"manageUsers()"}),"\n",(0,n.jsxs)(t.p,{children:["Admin interacts with the person class to monitor different users based on their personal data.",(0,n.jsx)(t.br,{}),"\n","Gives the admin the ability to handle administrative actions.",(0,n.jsx)(t.br,{}),"\n","monitorProgress()"]}),"\n",(0,n.jsxs)(t.p,{children:["Allows the administrator to view different users progress.",(0,n.jsx)(t.br,{}),"\n","Will use personId, email, username to differentiate users.",(0,n.jsx)(t.br,{}),"\n","Will call lastUpdated to update user's progress."]}),"\n",(0,n.jsx)(t.p,{children:"Dashboard"}),"\n",(0,n.jsx)(t.p,{children:"Component that will allow the user to see view their progress while using the copilot tool as well as for the administrator to comment on tasks."}),"\n",(0,n.jsx)(t.p,{children:"Data fields"}),"\n",(0,n.jsx)(t.p,{children:"No data fields"}),"\n",(0,n.jsx)(t.p,{children:"Methods"}),"\n",(0,n.jsx)(t.p,{children:"displayProgress()"}),"\n",(0,n.jsxs)(t.p,{children:["Displays the user progress given their userId and progressId (string or int)\nWill fetch Progress data fields.",(0,n.jsx)(t.br,{}),"\n","Accesses users suggestion details to display results and feedback.",(0,n.jsx)(t.br,{}),"\n","Returns different progress objects for a given user."]}),"\n",(0,n.jsx)(t.p,{children:"provideFeedback()"}),"\n",(0,n.jsxs)(t.p,{children:["Allows the administrator to give users feedback that can be accessed in their dashboard.",(0,n.jsx)(t.br,{}),"\n","Level data field can be updated for different tasks.",(0,n.jsx)(t.br,{}),"\n","lastUpdated attribute will update when new feedback is entered."]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>a});var n=s(96540);const r={},i=n.createContext(r);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);